.go_environ:
  before_script:
    - export PATH="${PATH}:${GOPATH}/bin"

    - export GO_PROJECT_NAMESPACE_DIR="${GOPATH}/src/${GO_MODULE_BASE}"
    - export GO_PROJECT_SRC_DIR="${GO_PROJECT_NAMESPACE_DIR}/${GO_PROJECT_NAME}"

    # Install dependencies
    - apk --no-cache add gcc musl-dev git

    # Copy cached workspace items (e.g. dependencies) to GOPATH (if exists)
    - if [ -d "${GOSPACE_DIR}" ]; then cp -rfp "${GOSPACE_DIR}/." "${GOPATH}"; fi

    # Copy project source to GOPATH
    - mkdir -p "${GO_PROJECT_NAMESPACE_DIR}"
    - rm -rf "${GO_PROJECT_SRC_DIR}" # delete project source within GOPATH (if exists)
    - cp -rfp "${GIT_CLONE_PATH}" "${GO_PROJECT_SRC_DIR}"

    # Clear GOSPACE cache within CI_PROJECT_DIR (if exists)
    - rm -rf "${GOSPACE_DIR}"

    # Prepare empty directories for remaining build scripts
    - mkdir -p "${GOSPACE_DIR}" "${ARTIFACT_DIR}"

    # Navigate to project source under GOPATH
    - cd "${GO_PROJECT_SRC_DIR}"

    # Install modules
    - go get -d

  after_script:
    - cp -rfp "${GOPATH}/." "${GOSPACE_DIR}"
    - rm -rf "${GOSPACE_DIR}/src/${GO_MODULE_BASE}/${CI_PROJECT_NAME}" # do not cache project source within GOSPACE

.go_build_bin:
  extends: .go_environ
  stage: build:bin
  tags:
    - build-optimised

  script:
    # Add release info to binary
    - |
      printf "package common\nconst BuildTag = \"Release: ${CI_COMMIT_TAG:-Untagged}, Build ${CI_COMMIT_SHORT_SHA:-Unversioned}\"" \
        > common/release.go

    # Build binaries
    - export BIN_NAME="${ARTIFACT_DIR}/${PRODUCT_NAME}-${GOOS}-${GOARCH}-${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA:-unversioned}}${GOEXT}"
    - go build -o "${BIN_NAME}" -ldflags="-s -w"
    - chmod +x "${BIN_NAME}"

    # Run tests
    - go test -v ./...

  artifacts:
    name: "${PRODUCT_NAME}-release-${GOOS}-${GOARCH}"
    expire_in: 1w
    paths:
      - "build"
